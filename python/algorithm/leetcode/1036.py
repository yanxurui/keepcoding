# https://leetcode.com/problems/escape-a-large-maze/discuss/282849/Python-BFS-and-DFS-Maximum-Blocked-19900

from collections import deque

class Solution:
    def isEscapePossible(self, blocked, source, target) -> bool:
        blocked = {tuple(b) for b in blocked}
        
        # arr = [[' ' for j in range(1000)] for i in range(1000)]
        # min_i = min([i for i,_ in blocked])
        # min_j = min([j for _,j in blocked])
        # for i,j in blocked:
        #     arr[i-min_i][j-min_j] = '*'
        # arr[source[0]-min_i][source[1]-min_j] = '+'
        # for r in arr:
        #     print(''.join(r).rstrip())
        # pdb.set_trace()
        S = tuple(source)
        T = tuple(target)
        return not (self.is_blocked(blocked, S, T) or self.is_blocked(blocked, T, S))
    
    def is_blocked(self, blocked, S, T):
        visited = set([S])
        q = deque([(S,1)])
        while q:
            cur, steps = q.popleft()
            if cur == T:
                return False
            for nxt in [(cur[0]-1, cur[1]),(cur[0]+1, cur[1]),(cur[0], cur[1]-1),(cur[0], cur[1]+1)]:
                if 0 <= nxt[0] < 10**6 and 0 <= nxt[1] < 10**6 and nxt not in visited and nxt not in blocked:
                    q.append((nxt, steps+1))
                    visited.add(nxt)
                    if len(visited) > len(blocked)**2:
                        return False
        return True


if __name__ == '__main__':
    from testfunc import test
    test_data = [
        (
            (
                [[0,1],[1,0]],
                [0,0],
                [0,2]
            ),
            False
        ),
        (
            (
                [],
                [0,0],
                [999999,999999]
            ),
            True
        ),
        (
            (

                [0,0],
                [200,200]
            ),
            False
        ),
        (
            (
                [[508308,520647],[535401,223198],[989679,235669],[638292,517071],[375164,579817],[128677,762443],[662604,7264],[47310,498722],[356241,402010],[314340,992231],[176036,366589],[783713,753072],[360514,154930],[108581,503322],[945290,976295],[669233,758531],[451520,998155],[304234,140878],[333774,370772],[775068,405090],[515774,380092],[625780,839211],[702977,388864],[245125,378456],[468267,583584],[819716,95643],[950324,459875],[841356,790956],[763128,420688],[210139,501383],[846520,492341],[128915,525033],[465751,415715],[362810,32727],[718879,361648],[744122,730775],[182457,900724],[860770,791988],[333624,604876],[595939,624958],[14927,801051],[204371,91336],[420054,138500],[651182,132713],[564041,562673],[34192,555195],[558729,712143],[905212,749791],[867033,893007],[385560,669431],[471522,730023],[750127,655915],[177135,31695],[207789,122405],[311602,453893],[962407,48596],[460221,89417],[551121,210093],[4170,679713],[542917,65957],[625140,672855],[646211,844216],[26427,672182],[618987,970470],[417028,151440],[301189,667632],[928151,13947],[680889,219039],[347679,432527],[45655,92542],[362798,270250],[703249,315547],[842422,363436],[281916,25802],[984080,572283],[236947,295458],[825529,702272],[537140,834110],[988560,525865],[402656,967933],[360154,48613],[270207,457922],[13055,406507],[213594,553460],[707850,848947],[771743,39743],[216620,223611],[259873,789266],[716025,372675],[231702,333023],[617641,742097],[494871,370207],[782937,828334],[752931,986955],[793160,135656],[325852,58660],[358234,578894],[634888,89707],[308824,331127],[649553,803113],[30062,847611],[929350,164649],[577260,525944],[775704,372345],[804102,324430],[106462,828333],[595156,31908],[500561,214108],[514835,416289],[757712,982497],[973985,881523],[742302,440347],[585925,209292],[586719,458477],[351781,110623],[308063,922943],[169037,266728],[219211,432699],[586671,23073],[418037,715601],[325598,864398],[367956,186483],[506385,401714],[180930,933657],[414375,514967],[949052,135999],[725533,441803],[395174,557218],[378137,970653],[731012,664647],[531811,988516],[952578,231860],[712870,139512],[176109,59957],[891572,404023],[982008,762840],[370303,132226],[880888,613297],[298913,536957],[705576,159511],[72661,208722],[850534,803493],[590011,566575],[499956,83130],[408,418051],[195256,228601],[417747,543557],[849660,641034],[593530,955693],[182767,875607],[491771,883577],[144674,176656],[246635,85354],[286219,952168],[223875,472068],[399365,15317],[574621,558801],[778702,162516],[88763,379807],[884873,961826],[560705,97469],[528634,484612],[150518,554626],[553292,620544],[942023,96775],[461262,291234],[285892,166951],[117041,92024],[400737,206662],[902860,692822],[815607,541447],[15129,522323],[777152,373717],[141237,750538],[346206,636571],[884643,817946],[253780,453004],[611402,224167],[214923,833692],[260531,812631],[112207,198020],[832780,562837],[964624,666626],[620775,982993],[169314,120279],[168763,846141],[63933,687815],[31970,308946],[350461,251484],[68442,976201],[167267,443236],[604612,924771],[340754,543342],[514216,759714],[573139,886609],[588335,235149]],
                [683431,52080],
                [598609,641638]
            ),
            True
        ),
        (
            (
                [
                    [100059,100063],
                    [100060,100064],
                    [100061,100065],
                    [100062,100066],
                    [100063,100067],
                    [100064,100068],
                    [100065,100069],
                    [100066,100070],
                    [100067,100071],
                    [100068,100072],
                    [100069,100073],
                    [100070,100074],
                    [100071,100075],
                    [100072,100076],
                    [100073,100077],
                    [100074,100078],
                    [100075,100079],
                    [100076,100080],
                    [100077,100081],
                    [100078,100082],
                    [100079,100083],
                    [100080,100082],
                    [100081,100081],
                    [100082,100080],
                    [100083,100079],
                    [100084,100078],
                    [100085,100077],
                    [100086,100076],
                    [100087,100075],
                    [100088,100074],
                    [100089,100073],
                    [100090,100072],
                    [100091,100071],
                    [100092,100070],
                    [100093,100069],
                    [100094,100068],
                    [100095,100067],
                    [100096,100066],
                    [100097,100065],
                    [100098,100064],
                    [100099,100063],
                    [100098,100062],
                    [100097,100061],
                    [100096,100060],
                    [100095,100059],
                    [100094,100058],
                    [100093,100057],
                    [100092,100056],
                    [100091,100055],
                    [100090,100054],
                    [100089,100053],
                    [100088,100052],
                    [100087,100051],
                    [100086,100050],
                    [100085,100049],
                    [100084,100048],
                    [100083,100047],
                    [100082,100046],
                    [100081,100045],
                    [100080,100044],
                    [100079,100043],
                    [100078,100044],
                    [100077,100045],
                    [100076,100046],
                    [100075,100047],
                    [100074,100048],
                    [100073,100049],
                    [100072,100050],
                    [100071,100051],
                    [100070,100052],
                    [100069,100053],
                    [100068,100054],
                    [100067,100055],
                    [100066,100056],
                    [100065,100057],
                    [100064,100058],
                    [100063,100059],
                    [100062,100060],
                    [100061,100061],
                    [100060,100062]],
                [100079,100063],
                [999948,999967]
            ),
            False
        )
    ]
    test(Solution().isEscapePossible, test_data)
